<!DOCTYPE html?
<html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Fetch JSON from API to map lat long</title>
        <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
      integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
      integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
      crossorigin=""
      ></script>

      <style>
      #issMap { height: 400px; width: 800px; }
      </style>
    </head>
    <body>
        <h1>Where is this computer?</h1>

        <p>latitude: <span id='lat'></span>°<br/>
            longitude: <span id='lon'></span>°</p>

            <div id ="issMap"></div>


        <script>

            //make a map and tiles
            //setview is [lat, lon], zoom
            const mymap = L.map('issMap').setView([0,0], 1);
            //tile data
            const attribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
            //URL from openstreetmap for data with variables so any given tile can be loaded
            const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            //expected structure to add the tiles to the leaflet map
            const tiles = L.tileLayer(tileUrl, { attribution });
            //actually add the tiles to the map
            tiles.addTo(mymap);

            //create the icon from the local image
            const issIcon = L.icon({
                iconUrl: 'iss.png',
                iconSize: [50, 32],
                iconAnchor: [25, 16]
                });
            //places the marker
            //const marker = L.marker([0, 0], {icon:issIcon}).addTo(mymap);
            //const marker = L.marker([50, 50]).addTo(mymap);

            //variable to set the zoom level the first time and then give the user control
            let firstTime = true;

            // asyncronous function to get the location data
            async function getISS() {

                //**********cut point

                if ("geolocation" in navigator) {
                    console.log('geolocation available');
                    //calls the get current position api
                    //when the api is ready it activates the callback function
                    //in the ()
                    // the '=>' means 'position' is the name of the function at the far end of the arrow
                    navigator.geolocation.getCurrentPosition(position => {
                        console.log(position);
                        //variables to plug into the html
                        const lat = position.coords.latitude;
                        //document.getElementById('lat').textContent = lat;
                        const lon = position.coords.longitude;
                        //document.getElementById('lon').textContent = lon;
                    //marker.setLatLng(lat, lon);
                    const marker = L.marker([lat, lon]).addTo(mymap);

                    mymap.setView([lat, lon], 14);
                    document.getElementById('lat').textContent =
                    lat.toFixed(2);
                    document.getElementById('lon').textContent = //longitude.toFixed(2);
                    lon.toFixed(2);
                    console.log(lat);
                    console.log(lon);
                    });
                } else {
                    console.log('geolocation not available');
                }


                //**********cut point
                //adds a market at lat/lon by updating the variable above
                //marker.setLatLng([latitude, longitude]);
                // marker.setLatLng(lat, lon);
                // if (firstTime) {
                //     //centers the map on the marker (lat, lon, zoom)
                //     //mymap.setView([latitude, longitude], 2);
                //     mymap.setView(lat, lon, 2);
                //     firstTime = false;
                // }

                //write the elements to the body, capping at 2 decimal places
                // document.getElementById('lat').textContent =
                // //latitude.toFixed(2);
                // lat.toFixed(2);
                // document.getElementById('lon').textContent = //longitude.toFixed(2);
                // lon.toFixed(2);
                // console.log(latitude);
                // console.log(longitude);
            }

            //run getIss right at the start
            getISS();

            //run getISS() every second
            //setInterval(getISS, 1000);


        </script>
    <body>
</html>
